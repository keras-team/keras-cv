name: Tests

on:
  push:
  pull_request:
  release:
    types: [created]

permissions:
  contents: read

jobs:
  test:
    name: Test the code with tf.keras
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Get pip cache dir
      id: pip-cache
      run: |
        python -m pip install --upgrade pip setuptools
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        pip install tensorflow>=2.13.0
        pip install torch>=2.0.1+cpu
        pip install "jax[cpu]"
        pip install keras-core
        pip install -e ".[tests]" --progress-bar off --upgrade
    - name: Test with pytest
      env:
        TEST_CUSTOM_OPS: false
      run: |
        pytest keras_cv/ --ignore keras_cv/models/legacy/ --durations 0
  multibackend:
    name: Test the code with Keras Core
    strategy:
      fail-fast: false
      matrix:
        backend: [tensorflow, jax, torch]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Get pip cache dir
      id: pip-cache
      run: |
        python -m pip install --upgrade pip setuptools
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        pip install tensorflow>=2.13.0
        pip install "jax[cpu]"
        pip install torch>=2.0.1+cpu
        pip install torchvision>=0.15.1
        pip install keras-core
        pip install -e ".[tests]" --progress-bar off --upgrade
    - name: Test with pytest
      env:
        TEST_CUSTOM_OPS: false # TODO(ianstenbit): test custom ops, or figure out what our story is here
        KERAS_BACKEND: ${{ matrix.backend }}
        JAX_ENABLE_X64: true
      run: |
        pytest keras_cv/bounding_box \
               keras_cv/callbacks \
               keras_cv/losses \
               keras_cv/layers/object_detection \
               keras_cv/layers/preprocessing \
               keras_cv/models/backbones \
               keras_cv/models/classification \
               keras_cv/models/object_detection/retinanet \
               keras_cv/models/object_detection/yolo_v8 \
               keras_cv/models/object_detection_3d \
               keras_cv/models/segmentation \
               --durations 0
  format:
    name: Check the code format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Get pip cache dir
      id: pip-cache
      run: |
        python -m pip install --upgrade pip setuptools
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        pip install tensorflow>=2.13.0
        pip install -e ".[tests]" --progress-bar off --upgrade
    - name: Lint
      run: bash shell/lint.sh
    - name: Clang
      uses: DoozyX/clang-format-lint-action@v0.14
      with:
        source: '.'
        extensions: 'h,c,cpp,hpp,cc'
        clangFormatVersion: 14
        style: google
